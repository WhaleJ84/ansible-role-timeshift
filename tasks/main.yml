---
- name: INSTALL | Timeshift
  block:
    - name: INSTALL | Install Timeshift from apt repository
      become: true
      ansible.builtin.apt:
        name: timeshift
        state: latest
      when: ansible_facts['pkg_mgr'] == "apt"
  tags: install

- name: CONFIGURE | Timeshift
  block:
    - name: CONFIGURE | Load content from /etc/timeshift.json
      ansible.builtin.include_vars:
        file: /etc/timeshift.json
        name: timeshift_config

    - name: CONFIGURE | Individual Settings
      block:
      - name: CONFIGURE | Do First Run
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'do_first_run': '{{ do_first_run }}' }) }}"
        when: timeshift_config['do_first_run'] != do_first_run
        changed_when: true

      - name: CONFIGURE | BTRFS Mode
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'btrfs_mode': '{{ btrfs_mode }}' }) }}"
        when: timeshift_config['btrfs_mode'] != btrfs_mode
        changed_when: true

        #    - name: CONFIGURE | Include BTRFS Home
        #      ansible.builtin.set_fact:
        #        timeshift_config: "{{ timeshift_config | default([]) | combine({ 'include_btrfs_home': '{{ include_btrfs_home }}' }) }}"
        #      when: timeshift_config['include_btrfs_home'] != include_btrfs_home
        #      changed_when: true

      - name: CONFIGURE | Include BTRFS Home For Backup
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'include_btrfs_home_for_backup': '{{ include_btrfs_home_for_backup }}' }) }}"
        when: timeshift_config['include_btrfs_home_for_backup'] != include_btrfs_home_for_backup
        changed_when: true

      - name: CONFIGURE | Include BTRFS Home For Restore
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'include_btrfs_home_for_restore': '{{ include_btrfs_home_for_restore }}' }) }}"
        when: timeshift_config['include_btrfs_home_for_restore'] != include_btrfs_home_for_restore
        changed_when: true

      - name: CONFIGURE | Stop Cron Emails
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'stop_cron_emails': '{{ stop_cron_emails }}' }) }}"
        when: timeshift_config['stop_cron_emails'] != stop_cron_emails
        changed_when: true

      - name: CONFIGURE | BTRFS Use Qgroup
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'btrfs_use_qgroup': '{{ btrfs_use_qgroup }}' }) }}"
        when: timeshift_config['btrfs_use_qgroup'] != btrfs_use_qgroup
        changed_when: true

      - name: CONFIGURE | Schedule Monthly
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'schedule_monthly': '{{ schedule_monthly }}' }) }}"
        when: timeshift_config['schedule_monthly'] != schedule_monthly
        changed_when: true

      - name: CONFIGURE | Schedule Weekly
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'schedule_weekly': '{{ schedule_weekly }}' }) }}"
        when: timeshift_config['schedule_weekly'] != schedule_weekly
        changed_when: true

      - name: CONFIGURE | Schedule Daily
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'schedule_daily': '{{ schedule_daily }}' }) }}"
        when: timeshift_config['schedule_daily'] != schedule_daily
        changed_when: true

      - name: CONFIGURE | Schedule Hourly
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'schedule_hourly': '{{ schedule_hourly }}' }) }}"
        when: timeshift_config['schedule_hourly'] != schedule_hourly
        changed_when: true

      - name: CONFIGURE | Schedule Boot
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'schedule_boot': '{{ schedule_boot }}' }) }}"
        when: timeshift_config['schedule_boot'] != schedule_boot
        changed_when: true

      - name: CONFIGURE | Count Monthly
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'count_monthly': '{{ count_monthly }}' }) }}"
        when: timeshift_config['count_monthly'] != count_monthly
        changed_when: true

      - name: CONFIGURE | Count Weekly
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'count_weekly': '{{ count_weekly }}' }) }}"
        when: timeshift_config['count_weekly'] != count_weekly
        changed_when: true

      - name: CONFIGURE | Count Daily
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'count_daily': '{{ count_daily }}' }) }}"
        when: timeshift_config['count_daily'] != count_daily
        changed_when: true

      - name: CONFIGURE | Count Hourly
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'count_hourly': '{{ count_hourly }}' }) }}"
        when: timeshift_config['count_hourly'] != count_hourly
        changed_when: true

      - name: CONFIGURE | Count Boot
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'count_boot': '{{ count_boot }}' }) }}"
        when: timeshift_config['count_boot'] != count_boot
        changed_when: true

        #    - name: CONFIGURE | Snapshot Size
        #      ansible.builtin.set_fact:
        #        timeshift_config: "{{ timeshift_config | default([]) | combine({ 'snapshot_size': '{{ snapshot_size }}' }) }}"
        #      when: timeshift_config['snapshot_size'] != snapshot_size
        #      changed_when: true

        #    - name: CONFIGURE | Snapshot Count
        #      ansible.builtin.set_fact:
        #        timeshift_config: "{{ timeshift_config | default([]) | combine({ 'snapshot_count': '{{ snapshot_count }}' }) }}"
        #      when: timeshift_config['snapshot_count'] != snapshot_count
        #      changed_when: true

      - name: CONFIGURE | Date Format
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'date_format': '{{ date_format }}' }) }}"
        when: timeshift_config['date_format'] != date_format
        changed_when: true

        #    - name: CONFIGURE | Exclude
        #      ansible.builtin.set_fact:
        #        timeshift_config: "{{ timeshift_config | default([]) | combine({ 'exclude': '{{ exclude }}' }) }}"
        #      when: timeshift_config['exclude'] != exclude
        #      changed_when: true

      - name: CONFIGURE | Exclude Apps
        ansible.builtin.set_fact:
          timeshift_config: "{{ timeshift_config | default([]) | combine({ 'exclude-apps': '{{ exclude_apps }}' }) }}"
        when: timeshift_config['exclude-apps'] != exclude_apps
        changed_when: true

        #    - name: CONFIGURE | Backup Device UUID
        #      ansible.builtin.set_fact:
        #        timeshift_config: "{{ timeshift_config | default([]) | combine({ 'backup_device_uuid': '{{ backup_device_uuid }}' }) }}"
        #      when: timeshift_config['backup_device_uuid'] != backup_device_uuid
        #      changed_when: true

        #    - name: CONFIGURE | Parent Device UUID
        #      ansible.builtin.set_fact:
        #        timeshift_config: "{{ timeshift_config | default([]) | combine({ 'parent_device_uuid': '{{ parent_device_uuid }}' }) }}"
        #      when: timeshift_config['parent_device_uuid'] != parent_device_uuid
        #      changed_when: true
      notify: Update Timeshift Settings
  tags: configure

- name: REMOVE | Timeshift
  block:
    - name: REMOVE | Remove timeshift from apt repository
      become: true
      ansible.builtin.apt:
        name: timeshift
        state: absent
      when: ansible_facts['pkg_mgr'] == "apt"
  tags: [remove, never]

